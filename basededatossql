-- =============================================
-- SCRIPT COMPLETO PARA LA BASE DE DATOS DE CAZAOFERTAS
-- Mayo 2025
-- =============================================

-- Limpiar tablas existentes
DROP TABLE IF EXISTS notificaciones CASCADE;
DROP TABLE IF EXISTS comentarios CASCADE;
DROP TABLE IF EXISTS votos CASCADE;
DROP TABLE IF EXISTS ofertas CASCADE;
DROP TABLE IF EXISTS categorias CASCADE;
DROP TABLE IF EXISTS perfiles_usuario CASCADE;

-- Crear extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS pg_trgm;

-- =============================================
-- TABLAS PRINCIPALES
-- =============================================

-- Tabla de perfiles de usuario
CREATE TABLE perfiles_usuario (
    id UUID PRIMARY KEY,
    nombre_usuario TEXT UNIQUE NOT NULL,
    url_avatar TEXT,
    biografia TEXT,
    puntuacion_reputacion INTEGER DEFAULT 0,
    esta_verificado BOOLEAN DEFAULT FALSE,
    notificaciones_email BOOLEAN DEFAULT TRUE,
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_auth_user FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Tabla de categorías
CREATE TABLE categorias (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    icono TEXT,
    descripcion TEXT,
    color TEXT DEFAULT '#6366f1',
    orden_visualizacion INTEGER DEFAULT 0,
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabla de ofertas
CREATE TABLE ofertas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    titulo TEXT NOT NULL,
    descripcion TEXT NOT NULL,
    precio_actual DECIMAL NOT NULL,
    precio_original DECIMAL,
    url TEXT NOT NULL,
    url_imagen TEXT,
    tienda TEXT NOT NULL,
    id_usuario UUID NOT NULL,
    id_categoria UUID NOT NULL,
    ha_expirado BOOLEAN DEFAULT FALSE,
    expira_en TIMESTAMP WITH TIME ZONE,
    esta_verificada BOOLEAN DEFAULT TRUE,
    votos_positivos INTEGER DEFAULT 0,
    votos_negativos INTEGER DEFAULT 0,
    contador_comentarios INTEGER DEFAULT 0,
    contador_vistas INTEGER DEFAULT 0,
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES auth.users(id) ON DELETE CASCADE,
    CONSTRAINT fk_categoria FOREIGN KEY (id_categoria) REFERENCES categorias(id) ON DELETE CASCADE,
    porcentaje_descuento INTEGER GENERATED ALWAYS AS (
        CASE 
            WHEN precio_original IS NOT NULL AND precio_original > 0 AND precio_actual < precio_original 
            THEN ROUND(((precio_original - precio_actual) / precio_original) * 100)
            ELSE NULL 
        END
    ) STORED
);

-- Tabla de votos
CREATE TABLE votos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    id_oferta UUID NOT NULL,
    id_usuario UUID NOT NULL,
    tipo_voto TEXT NOT NULL CHECK (tipo_voto IN ('up', 'down')),
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_oferta FOREIGN KEY (id_oferta) REFERENCES ofertas(id) ON DELETE CASCADE,
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES auth.users(id) ON DELETE CASCADE,
    CONSTRAINT unique_usuario_oferta UNIQUE (id_usuario, id_oferta)
);

-- Tabla de comentarios
CREATE TABLE comentarios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    id_oferta UUID NOT NULL,
    id_usuario UUID NOT NULL,
    contenido TEXT NOT NULL,
    ha_sido_editado BOOLEAN DEFAULT FALSE,
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT fk_oferta FOREIGN KEY (id_oferta) REFERENCES ofertas(id) ON DELETE CASCADE,
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Tabla de notificaciones
CREATE TABLE notificaciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    id_usuario UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    tipo TEXT NOT NULL,
    mensaje TEXT NOT NULL,
    leida BOOLEAN DEFAULT FALSE,
    datos JSONB,
    creado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    actualizado_en TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- ÍNDICES
-- =============================================

-- Índices para búsquedas de texto
CREATE INDEX IF NOT EXISTS indice_titulo_oferta ON ofertas USING GIN (titulo gin_trgm_ops);
CREATE INDEX IF NOT EXISTS indice_descripcion_oferta ON ofertas USING GIN (descripcion gin_trgm_ops);

-- Índices para ofertas
CREATE INDEX IF NOT EXISTS idx_ofertas_expiradas ON ofertas (ha_expirado);
CREATE INDEX IF NOT EXISTS idx_ofertas_categoria_estado ON ofertas (id_categoria, ha_expirado);
CREATE INDEX IF NOT EXISTS idx_ofertas_tienda ON ofertas (tienda);
CREATE INDEX IF NOT EXISTS idx_ofertas_descuento ON ofertas (porcentaje_descuento);
CREATE INDEX IF NOT EXISTS idx_ofertas_creado_en ON ofertas (creado_en DESC);
CREATE INDEX IF NOT EXISTS idx_ofertas_id_usuario ON ofertas (id_usuario);

-- Índices para categorías
CREATE INDEX IF NOT EXISTS idx_categorias_slug ON categorias (slug);
CREATE INDEX IF NOT EXISTS idx_categorias_orden ON categorias (orden_visualizacion);

-- Índices para comentarios y votos
CREATE INDEX IF NOT EXISTS idx_comentarios_id_oferta ON comentarios (id_oferta);
CREATE INDEX IF NOT EXISTS idx_comentarios_id_usuario ON comentarios (id_usuario);
CREATE INDEX IF NOT EXISTS idx_votos_id_oferta ON votos (id_oferta);
CREATE INDEX IF NOT EXISTS idx_votos_id_usuario ON votos (id_usuario);

-- =============================================
-- VISTAS
-- =============================================

-- Vista para perfiles en inglés
CREATE OR REPLACE VIEW user_profiles AS
SELECT 
    id,
    nombre_usuario AS username,
    url_avatar AS avatar_url,
    biografia AS bio,
    puntuacion_reputacion AS reputation_score,
    esta_verificado AS is_verified,
    notificaciones_email AS email_notifications,
    creado_en AS created_at,
    actualizado_en AS updated_at
FROM perfiles_usuario;

-- Vista para estadísticas de categorías
CREATE OR REPLACE VIEW vista_estadisticas_categorias AS
SELECT 
    c.id,
    c.nombre,
    c.slug,
    c.icono,
    c.descripcion,
    c.color,
    COUNT(o.id) as total_ofertas,
    COUNT(o.id) FILTER (WHERE NOT o.ha_expirado) as ofertas_activas,
    COALESCE(AVG(o.porcentaje_descuento) FILTER (WHERE o.porcentaje_descuento IS NOT NULL), 0) AS descuento_promedio
FROM 
    categorias c
LEFT JOIN 
    ofertas o ON c.id = o.id_categoria
GROUP BY 
    c.id, c.nombre, c.slug, c.icono, c.descripcion, c.color;

-- Vista para tiendas populares
CREATE OR REPLACE VIEW vista_tiendas_populares AS
SELECT 
    tienda,
    COUNT(*) as total_ofertas,
    COUNT(*) FILTER (WHERE NOT ha_expirado) as ofertas_activas,
    COALESCE(AVG(porcentaje_descuento) FILTER (WHERE porcentaje_descuento IS NOT NULL), 0) AS descuento_promedio,
    MAX(creado_en) as ultima_oferta
FROM 
    ofertas
GROUP BY 
    tienda
HAVING 
    COUNT(*) FILTER (WHERE NOT ha_expirado) > 0
ORDER BY 
    COUNT(*) FILTER (WHERE NOT ha_expirado) DESC;

-- =============================================
-- FUNCIONES Y TRIGGERS
-- =============================================

-- Función para crear perfil de usuario automáticamente
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.perfiles_usuario (id, nombre_usuario)
    VALUES (NEW.id, SPLIT_PART(NEW.email, '@', 1));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger para crear perfil al registrarse
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

-- Función para actualizar fecha de actualización
CREATE OR REPLACE FUNCTION actualizar_fecha_actualizacion()
RETURNS TRIGGER AS $$
BEGIN
    NEW.actualizado_en = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para actualizar fechas
CREATE TRIGGER actualizar_fecha_perfil_usuario
    BEFORE UPDATE ON perfiles_usuario
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_actualizacion();

CREATE TRIGGER actualizar_fecha_categorias
    BEFORE UPDATE ON categorias
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_actualizacion();

CREATE TRIGGER actualizar_fecha_ofertas
    BEFORE UPDATE ON ofertas
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_actualizacion();

-- Función para actualizar ofertas expiradas
CREATE OR REPLACE FUNCTION actualizar_ofertas_expiradas()
RETURNS TRIGGER AS $$
BEGIN
    -- Evitar recursión infinita
    IF (TG_OP = 'UPDATE' AND 
        OLD.ha_expirado = FALSE AND 
        NEW.ha_expirado = TRUE AND
        OLD.titulo = NEW.titulo) THEN
        RETURN NEW;
    END IF;

    UPDATE ofertas
    SET ha_expirado = TRUE
    WHERE expira_en < NOW() 
        AND ha_expirado = FALSE;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar ofertas expiradas
CREATE TRIGGER trigger_actualizar_ofertas_expiradas
    AFTER INSERT OR UPDATE ON ofertas
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_ofertas_expiradas();

-- =============================================
-- POLÍTICAS DE SEGURIDAD (RLS)
-- =============================================

-- Habilitar RLS en todas las tablas
ALTER TABLE perfiles_usuario ENABLE ROW LEVEL SECURITY;
ALTER TABLE ofertas ENABLE ROW LEVEL SECURITY;
ALTER TABLE categorias ENABLE ROW LEVEL SECURITY;
ALTER TABLE votos ENABLE ROW LEVEL SECURITY;
ALTER TABLE comentarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE notificaciones ENABLE ROW LEVEL SECURITY;

-- Políticas para perfiles de usuario
CREATE POLICY "ver_perfiles" ON perfiles_usuario FOR SELECT USING (true);
CREATE POLICY "editar_perfil_propio" ON perfiles_usuario FOR UPDATE USING (auth.uid() = id);

-- Políticas para ofertas
CREATE POLICY "ver_ofertas" ON ofertas FOR SELECT USING (true);
CREATE POLICY "crear_ofertas" ON ofertas FOR INSERT WITH CHECK (auth.uid() = id_usuario);
CREATE POLICY "editar_ofertas_propias" ON ofertas FOR UPDATE USING (auth.uid() = id_usuario);
CREATE POLICY "eliminar_ofertas_propias" ON ofertas FOR DELETE USING (auth.uid() = id_usuario);

-- Políticas para categorías
CREATE POLICY "acceso_categorias" ON categorias FOR ALL USING (true);

-- Políticas para votos
CREATE POLICY "ver_votos" ON votos FOR SELECT USING (true);
CREATE POLICY "gestionar_votos_propios" ON votos FOR ALL USING (auth.uid() = id_usuario);

-- Políticas para comentarios
CREATE POLICY "ver_comentarios" ON comentarios FOR SELECT USING (true);
CREATE POLICY "gestionar_comentarios_propios" ON comentarios FOR ALL USING (auth.uid() = id_usuario);

-- Políticas para notificaciones
CREATE POLICY "gestionar_notificaciones_propias" ON notificaciones FOR ALL USING (auth.uid() = id_usuario);

-- =============================================
-- DATOS INICIALES
-- =============================================

-- Insertar categorías iniciales
INSERT INTO categorias (nombre, slug, icono, descripcion, color, orden_visualizacion) VALUES
('Tecnología', 'tecnologia', '💻', 'Ofertas en dispositivos electrónicos, gadgets y más', '#3B82F6', 1),
('Moda', 'moda', '👕', 'Las mejores ofertas en ropa, calzado y accesorios', '#EC4899', 2),
('Hogar', 'hogar', '🏠', 'Productos para decorar y equipar tu hogar', '#10B981', 3),
('Videojuegos', 'videojuegos', '🎮', 'Consolas, juegos y accesorios para gamers', '#8B5CF6', 4),
('Alimentación', 'alimentacion', '🍕', 'Descuentos en supermercados y productos alimenticios', '#F59E0B', 5),
('Belleza', 'belleza', '💄', 'Productos de cosmética, perfumería y cuidado personal', '#F472B6', 6),
('Deportes', 'deportes', '⚽', 'Equipamiento deportivo y ropa para estar en forma', '#2563EB', 7),
('Viajes', 'viajes', '✈️', 'Chollos en vuelos, hoteles y paquetes vacacionales', '#6366F1', 8),
('Libros', 'libros', '📚', 'Las mejores ofertas en libros y ebooks', '#4B5563', 9),
('Mascotas', 'mascotas', '🐾', 'Todo para tus animales de compañía', '#8B5C34', 10),
('Electrónica', 'electronica', '📱', 'Dispositivos electrónicos y gadgets', '#3B82F6', 11),
('Informática', 'informatica', '💻', 'Ordenadores, portátiles, componentes y accesorios', '#2563EB', 12),
('Bricolaje', 'bricolaje', '🔨', 'Herramientas y materiales para tus proyectos', '#F97316', 13),
('Salud', 'salud', '🏥', 'Productos para el cuidado de la salud', '#059669', 14),
('Juguetes', 'juguetes', '🧸', 'Juguetes para todas las edades', '#EF4444', 15);

-- Crear perfiles para usuarios existentes
INSERT INTO public.perfiles_usuario (id, nombre_usuario)
SELECT id, SPLIT_PART(email, '@', 1)
FROM auth.users
WHERE id NOT IN (SELECT id FROM public.perfiles_usuario);

-- =============================================
-- DATOS DE- PERFILES DE USUARIO
-- =============================================

-- Insertar perfiles de ejemplo (usando UUIDs ficticios para demo)
INSERT INTO perfiles_usuario (id, nombre_usuario, url_avatar, biografia, puntuacion_reputacion, esta_verificado) VALUES
('550e8400-e29b-41d4-a716-446655440001', 'cazachollos_pro', 'https://avatar.example.com/1.jpg', 'Experto en encontrar las mejores ofertas tecnológicas', 850, true),
('550e8400-e29b-41d4-a716-446655440002', 'ofertas_moda', 'https://avatar.example.com/2.jpg', 'Siempre al día con las últimas tendencias y descuentos', 620, true),
('550e8400-e29b-41d4-a716-446655440003', 'gamer_deals', 'https://avatar.example.com/3.jpg', 'Gaming es mi pasión, ahorro es mi objetivo', 720, false),
('550e8400-e29b-41d4-a716-446655440004', 'hogar_smart', 'https://avatar.example.com/4.jpg', 'Decorando mi hogar con las mejores ofertas', 450, false),
('550e8400-e29b-41d4-a716-446655440005', 'viajero_low_cost', 'https://avatar.example.com/5.jpg', 'Viajando por el mundo sin romper el banco', 380, false)
ON CONFLICT (id) DO NOTHING;

-- =============================================
-- DATOS OFERTAS
-- =============================================

-- Ofertas de Tecnología
INSERT INTO ofertas (titulo, descripcion, precio_actual, precio_original, url, url_imagen, tienda, id_usuario, id_categoria, expira_en) VALUES
('iPhone 15 Pro 128GB', 'El último iPhone de Apple con chip A17 Pro y cámara de 48MP. Incluye cargador inalámbrico gratis.', 999.99, 1199.99, 'https://ejemplo-tienda.com/iphone15pro', 'https://ejemplo-images.com/iphone15.jpg', 'TechStore', '550e8400-e29b-41d4-a716-446655440001', (SELECT id FROM categorias WHERE slug = 'tecnologia'), NOW() + INTERVAL '7 days'),
('MacBook Air M2', 'Portátil Apple con chip M2, 8GB RAM y 256GB SSD. Perfecto para trabajo y estudios.', 1049.99, 1249.99, 'https://ejemplo-tienda.com/macbook-air', 'https://ejemplo-images.com/macbook.jpg', 'AppleStore', '550e8400-e29b-41d4-a716-446655440001', (SELECT id FROM categorias WHERE slug = 'informatica'), NOW() + INTERVAL '5 days'),
('Samsung Galaxy S24', 'Smartphone Android con cámara de 200MP y pantalla Dynamic AMOLED 2X.', 749.99, 899.99, 'https://ejemplo-tienda.com/galaxy-s24', 'https://ejemplo-images.com/galaxy.jpg', 'Samsung', '550e8400-e29b-41d4-a716-446655440001', (SELECT id FROM categorias WHERE slug = 'electronica'), NOW() + INTERVAL '10 days'),

-- Ofertas de Videojuegos
('PlayStation 5 + Spider-Man 2', 'Consola PS5 con el juego Spider-Man 2 incluido. Stock limitado.', 499.99, 569.99, 'https://ejemplo-tienda.com/ps5-bundle', 'https://ejemplo-images.com/ps5.jpg', 'GameStop', '550e8400-e29b-41d4-a716-446655440003', (SELECT id FROM categorias WHERE slug = 'videojuegos'), NOW() + INTERVAL '3 days'),
('The Legend of Zelda: Tears of the Kingdom', 'La última aventura de Link en Nintendo Switch. Juego del año 2023.', 49.99, 69.99, 'https://ejemplo-tienda.com/zelda-totk', 'https://ejemplo-images.com/zelda.jpg', 'Nintendo Store', '550e8400-e29b-41d4-a716-446655440003', (SELECT id FROM categorias WHERE slug = 'videojuegos'), NOW() + INTERVAL '14 days'),

-- Ofertas de Moda
('Zapatillas Nike Air Max 270', 'Zapatillas deportivas con tecnología Air Max. Disponibles en varios colores.', 89.99, 139.99, 'https://ejemplo-tienda.com/nike-air-max', 'https://ejemplo-images.com/nike.jpg', 'Nike', '550e8400-e29b-41d4-a716-446655440002', (SELECT id FROM categorias WHERE slug = 'moda'), NOW() + INTERVAL '6 days'),
('Chaqueta Adidas Originals', 'Chaqueta vintage estilo retro. Perfecta para el otoño.', 59.99, 89.99, 'https://ejemplo-tienda.com/adidas-jacket', 'https://ejemplo-images.com/adidas.jpg', 'Adidas', '550e8400-e29b-41d4-a716-446655440002', (SELECT id FROM categorias WHERE slug = 'moda'), NOW() + INTERVAL '8 days'),

-- Ofertas de Hogar
('Robot Aspirador Roomba i7+', 'Robot aspirador inteligente con base de autovaciado. Compatible con Alexa.', 399.99, 599.99, 'https://ejemplo-tienda.com/roomba-i7', 'https://ejemplo-images.com/roomba.jpg', 'iRobot', '550e8400-e29b-41d4-a716-446655440004', (SELECT id FROM categorias WHERE slug = 'hogar'), NOW() + INTERVAL '12 days'),
('Set de Sartenes Antiadherentes', 'Juego de 5 sartenes con revestimiento cerámico. Aptas para lavavajillas.', 79.99, 129.99, 'https://ejemplo-tienda.com/sartenes-set', 'https://ejemplo-images.com/sartenes.jpg', 'CocinaMax', '550e8400-e29b-41d4-a716-446655440004', (SELECT id FROM categorias WHERE slug = 'hogar'), NOW() + INTERVAL '9 days'),

-- Ofertas de Viajes
('Vuelo Madrid-París ida y vuelta', 'Vuelos directos con Iberia. Incluye equipaje de mano.', 89.99, 159.99, 'https://ejemplo-viajes.com/madrid-paris', 'https://ejemplo-images.com/paris.jpg', 'Iberia', '550e8400-e29b-41d4-a716-446655440005', (SELECT id FROM categorias WHERE slug = 'viajes'), NOW() + INTERVAL '4 days'),
('Hotel 4* Barcelona Centro', 'Hotel boutique en el centro de Barcelona. Desayuno incluido.', 79.99, 129.99, 'https://ejemplo-hoteles.com/barcelona', 'https://ejemplo-images.com/hotel.jpg', 'Booking.com', '550e8400-e29b-41d4-a716-446655440005', (SELECT id FROM categorias WHERE slug = 'viajes'), NOW() + INTERVAL '15 days'),

-- Ofertas de Deportes
('Bicicleta de Montaña Trek', 'Mountain bike con suspensión delantera y 21 velocidades.', 449.99, 599.99, 'https://ejemplo-tienda.com/trek-mtb', 'https://ejemplo-images.com/bici.jpg', 'Decathlon', '550e8400-e29b-41d4-a716-446655440003', (SELECT id FROM categorias WHERE slug = 'deportes'), NOW() + INTERVAL '11 days'),

-- Ofertas de Libros
('Colección Harry Potter Completa', 'Los 7 libros de Harry Potter en edición especial con tapa dura.', 89.99, 149.99, 'https://ejemplo-tienda.com/harry-potter', 'https://ejemplo-images.com/hp.jpg', 'Casa del Libro', '550e8400-e29b-41d4-a716-446655440002', (SELECT id FROM categorias WHERE slug = 'libros'), NOW() + INTERVAL '20 days'),

-- Ofertas de Alimentación
('Jamón Ibérico 5J', 'Jamón ibérico de bellota 24 meses de curación. Cortado a mano.', 149.99, 199.99, 'https://ejemplo-tienda.com/jamon-5j', 'https://ejemplo-images.com/jamon.jpg', 'El Corte Inglés', '550e8400-e29b-41d4-a716-446655440004', (SELECT id FROM categorias WHERE slug = 'alimentacion'), NOW() + INTERVAL '7 days'),

-- Ofertas de Belleza
('Set Skincare The Ordinary', 'Rutina completa de cuidado facial con ácido hialurónico y niacinamida.', 29.99, 49.99, 'https://ejemplo-tienda.com/the-ordinary', 'https://ejemplo-images.com/skincare.jpg', 'Sephora', '550e8400-e29b-41d4-a716-446655440002', (SELECT id FROM categorias WHERE slug = 'belleza'), NOW() + INTERVAL '13 days'),

-- Ofertas de Mascotas
('Cama Ortopédica para Perros', 'Cama de espuma viscoelástica para perros grandes. Funda lavable.', 49.99, 79.99, 'https://ejemplo-tienda.com/cama-perro', 'https://ejemplo-images.com/cama.jpg', 'Kiwoko', '550e8400-e29b-41d4-a716-446655440004', (SELECT id FROM categorias WHERE slug = 'mascotas'), NOW() + INTERVAL '16 days'),

-- Ofertas de Juguetes
('LEGO Creator 3 en 1', 'Set de construcción LEGO con 3 modelos diferentes. 500+ piezas.', 39.99, 59.99, 'https://ejemplo-tienda.com/lego-creator', 'https://ejemplo-images.com/lego.jpg', 'ToysRUs', '550e8400-e29b-41d4-a716-446655440005', (SELECT id FROM categorias WHERE slug = 'juguetes'), NOW() + INTERVAL '18 days');

-- =============================================
-- DATOS DE EJEMPLO - VOTOS
-- =============================================

-- Insertar algunos votos de ejemplo
INSERT INTO votos (id_oferta, id_usuario, tipo_voto) VALUES
((SELECT id FROM ofertas WHERE titulo = 'iPhone 15 Pro 128GB'), '550e8400-e29b-41d4-a716-446655440002', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'iPhone 15 Pro 128GB'), '550e8400-e29b-41d4-a716-446655440003', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'iPhone 15 Pro 128GB'), '550e8400-e29b-41d4-a716-446655440004', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'PlayStation 5 + Spider-Man 2'), '550e8400-e29b-41d4-a716-446655440001', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'PlayStation 5 + Spider-Man 2'), '550e8400-e29b-41d4-a716-446655440002', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'Zapatillas Nike Air Max 270'), '550e8400-e29b-41d4-a716-446655440001', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'Robot Aspirador Roomba i7+'), '550e8400-e29b-41d4-a716-446655440003', 'up'),
((SELECT id FROM ofertas WHERE titulo = 'Robot Aspirador Roomba i7+'), '550e8400-e29b-41d4-a716-446655440005', 'down');

-- =============================================
-- DATOS DE EJEMPLO - COMENTARIOS
-- =============================================

-- Inserción de comentarios
INSERT INTO comentarios (id_oferta, id_usuario, contenido) VALUES
((SELECT id FROM ofertas WHERE titulo = 'iPhone 15 Pro 128GB'), '550e8400-e29b-41d4-a716-446655440002', '¡Excelente precio! Ya lo he pedido y llegó en 24h'),
((SELECT id FROM ofertas WHERE titulo = 'iPhone 15 Pro 128GB'), '550e8400-e29b-41d4-a716-446655440003', 'Cuidado que en otras tiendas está más barato, comparad precios'),
((SELECT id FROM ofertas WHERE titulo = 'PlayStation 5 + Spider-Man 2'), '550e8400-e29b-41d4-a716-446655440001', 'Al fin conseguí una PS5 a buen precio. El juego viene sellado'),
((SELECT id FROM ofertas WHERE titulo = 'Zapatillas Nike Air Max 270'), '550e8400-e29b-41d4-a716-446655440004', 'Las uso para correr y son muy cómodas. Recomendadas 100%'),
((SELECT id FROM ofertas WHERE titulo = 'Robot Aspirador Roomba i7+'), '550e8400-e29b-41d4-a716-446655440005', 'Tengo el modelo anterior y me ha cambiado la vida. Este es aún mejor');

-- Actualizar contadores de votos y comentarios
UPDATE ofertas SET 
    votos_positivos = (SELECT COUNT(*) FROM votos WHERE votos.id_oferta = ofertas.id AND tipo_voto = 'up'),
    votos_negativos = (SELECT COUNT(*) FROM votos WHERE votos.id_oferta = ofertas.id AND tipo_voto = 'down'),
    contador_comentarios = (SELECT COUNT(*) FROM comentarios WHERE comentarios.id_oferta = ofertas.id);
